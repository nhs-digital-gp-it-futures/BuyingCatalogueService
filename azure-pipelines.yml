variables:
  - name: dockerVersion
    value: '19.03.5'
  - name: dotnetVersion
    value: '5.0.x'
  - name: MSBUILDSINGLELOADCONTEXT
    value: '1'
  - group: dev-secrets

trigger:
- master

pr:
- master

jobs:
- job: version
  displayName: Work out Version
  pool:
    vmImage: 'ubuntu-latest'
  steps:
  - task: UseGitVersion@5
    displayName: gitversion
    inputs:
      versionSpec: '5.x'
  - script: echo "##vso[task.setvariable variable=semVer;isOutput=true]$(GitVersion.SemVer)"
    name: setVersionStep
  - script: echo semVer $(setVersionStep.semVer)
    name: echovar

- job: buildDb
  displayName: 'Build database project & publish dacpac'
  pool:
    vmImage: windows-2019
  steps:
  - task: VSBuild@1
    displayName: 'Build sqlproj' 
    inputs:
      solution: src/NHSD.BuyingCatalogue.Database/NHSD.BuyingCatalogue.Database.sqlproj

  - task: CopyFiles@2
    displayName: 'Copy Files to: $(build.artifactstagingdirectory)/database'
    inputs:
      SourceFolder: src
      Contents: '**\*.dacpac'
      TargetFolder: '$(build.artifactstagingdirectory)/database'
      FlattenFolders: true
      CleanTargetFolder: true

  - task: PublishBuildArtifacts@1
    displayName: 'Publish Artefact: database'
    inputs:
      PathtoPublish: '$(build.artifactstagingdirectory)/database'
      ArtifactName: database

- job: dockerBuildAndPush
  displayName: Run Unit & Integration tests and build & push docker containers to the acr
  variables:
    semVer: $[ dependencies.version.outputs['setVersionStep.semVer'] ]
  pool:
    vmImage: 'ubuntu-latest'
  dependsOn: version
  steps:
  - task: DockerInstaller@0
    displayName: 'Docker: Install - $(dockerVersion)'
    inputs:
      dockerVersion: $(dockerVersion)

  - task: UseDotNet@2
    displayName: 'Use DotNet $(dotnetVersion)'
    inputs:
      packageType: 'sdk'
      version: $(dotnetVersion)
      includePreviewVersions: false

  - task: DotNetCoreCLI@2
    displayName: 'Run dotnet restore'
    inputs:
      command: restore
      projects: src/NHSD.BuyingCatalogue.API/NHSD.BuyingCatalogue.API.csproj
      feedsToUse: config
      nugetConfigPath: 'NuGet.config'
      arguments: '-v n'

  - task: DotNetCoreCLI@2
    displayName: 'Run dotnet build'
    inputs:
      command: build
      projects: src/NHSD.BuyingCatalogue.API/NHSD.BuyingCatalogue.API.csproj
      arguments: '--no-restore --configuration Release'
  
  - task: DotNetCoreCLI@2
    displayName: Publish
    inputs:
      command: publish
      publishWebProjects: false
      projects: '**/*NHSD.BuyingCatalogue.API.csproj'
      arguments: '--no-build --configuration Release --output "docker/out"'
      zipAfterPublish: false
      modifyOutputPath: false
  
  - script: |
      docker-compose -f "docker/docker-compose.integration.yml" build --no-cache
      docker-compose -f "docker/docker-compose.integration.yml" up -d
      docker ps -a
    displayName: 'Docker up'

  - task: DotNetCoreCLI@2
    displayName: 'Run dotnet restore (tests)'
    inputs:
      command: restore
      projects: |
        **/*Tests.csproj
        !**/*IntegrationTests.csproj
      feedsToUse: config
      nugetConfigPath: 'NuGet.config'
      arguments: '-v n'

  - task: DotNetCoreCLI@2
    displayName: 'Run dotnet build (tests)'
    inputs:
      command: build
      projects: |
        **/*Tests.csproj
        !**/*IntegrationTests.csproj
      arguments: '--no-restore'
  
  - task: DotNetCoreCLI@2
    displayName: 'Run unit tests'
    inputs:
      command: test
      projects: |
        **/*Tests.csproj
        !**/*IntegrationTests.csproj
      arguments: '-v n --no-build --collect "Code coverage"'
  
  - task: DotNetCoreCLI@2
    displayName: 'Run Integration tests'
    inputs:
      command: test
      projects: '**/*IntegrationTests.csproj'
      arguments: '-v n --no-build'

  - task: DockerCompose@0
    displayName: 'Docker Build: Dev'
    condition: succeeded()
    inputs:
      azureSubscription: 'NHSAPP-BuyingCatalogue (Non-Prod)'
      azureContainerRegistry: '{"loginServer":"gpitfuturesdevacr.azurecr.io", "id" : "/subscriptions/7b12a8a2-f06f-456f-b6f9-aa2d92e0b2ec/resourceGroups/gpitfutures-dev-rg-acr/providers/Microsoft.ContainerRegistry/registries/gpitfuturesdevacr"}'
      dockerComposeFile: 'docker/docker-compose.build.yml'
      action: 'Build services'
      additionalImageTags: '$(semVer)'
      includeSourceTags: true
  
  - task: DockerCompose@0
    displayName: 'Docker Push: Dev'
    condition: succeeded()
    inputs:
      azureSubscription: 'NHSAPP-BuyingCatalogue (Non-Prod)'
      azureContainerRegistry: '{"loginServer":"gpitfuturesdevacr.azurecr.io", "id" : "/subscriptions/7b12a8a2-f06f-456f-b6f9-aa2d92e0b2ec/resourceGroups/gpitfutures-dev-rg-acr/providers/Microsoft.ContainerRegistry/registries/gpitfuturesdevacr"}'
      dockerComposeFile: 'docker/docker-compose.build.yml'
      action: 'Push services'
      additionalImageTags: '$(semVer)'
      includeSourceTags: true

  - task: HelmInstaller@1
    displayName: 'Install helm'
    condition: succeeded()
    inputs:
      helmVersionToInstall: 'latest'
  - bash: |
      cd charts
      for chart in *; do
        helm package \
            --version $(semVer) \
            --app-version $(semVer) \
            $chart
      done;
    failOnStderr: true
    displayName: 'Helm package'
    condition: succeeded()
  - bash: |
      cd charts  
      for chartPackage in *.tgz; do
        az acr helm push --force \
          -n "gpitfuturesdevacr" \
          -u "gpitfuturesdevacr" \
          -p $(gpitfuturesdevacr-pass) \
          $chartPackage
      done; 
    failOnStderr: false
    name: helmPush
    displayName: 'Push helm to az acr'
    condition: succeeded()
  
  - task: DockerCompose@0
    displayName: 'Docker Build: Test'
    condition: and(succeeded(), ne(variables['build.reason'], 'PullRequest'), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
    inputs:
      azureSubscription: 'NHSAPP-BuyingCatalogue (Non-Prod)'
      azureContainerRegistry: '{"loginServer":"gpitfuturestestacr.azurecr.io", "id" : "/subscriptions/7b12a8a2-f06f-456f-b6f9-aa2d92e0b2ec/resourceGroups/gpitfutures-test-rg-acr/providers/Microsoft.ContainerRegistry/registries/gpitfuturestestacr"}'
      dockerComposeFile: 'docker/docker-compose.build.yml'
      action: 'Build services'
      additionalImageTags: '$(semVer)'
      includeSourceTags: true
  
  - task: DockerCompose@0
    displayName: 'Docker Push: Test'
    condition: and(succeeded(), ne(variables['build.reason'], 'PullRequest'), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
    inputs:
      azureSubscription: 'NHSAPP-BuyingCatalogue (Non-Prod)'
      azureContainerRegistry: '{"loginServer":"gpitfuturestestacr.azurecr.io", "id" : "/subscriptions/7b12a8a2-f06f-456f-b6f9-aa2d92e0b2ec/resourceGroups/gpitfutures-test-rg-acr/providers/Microsoft.ContainerRegistry/registries/gpitfuturestestacr"}'
      dockerComposeFile: 'docker/docker-compose.build.yml'
      action: 'Push services'
      additionalImageTags: '$(semVer)'
      includeSourceTags: true
  
  - task: DockerCompose@0
    displayName: 'Docker Build: Prod'
    condition: and(succeeded(), ne(variables['build.reason'], 'PullRequest'), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
    inputs:
      azureSubscription: 'NHSAPP-BuyingCatalogue (Prod)'
      azureContainerRegistry: '{"loginServer":"gpitfuturesprodacr.azurecr.io", "id" : "/subscriptions/d1be8dbc-1a9f-4b7b-ba51-037116110e00/resourceGroups/gpitfutures-prod-rg-acr/providers/Microsoft.ContainerRegistry/registries/gpitfuturesprodacr"}'
      dockerComposeFile: 'docker/docker-compose.build.yml'
      action: 'Build services'
      additionalImageTags: '$(semVer)'
      includeSourceTags: true
  
  - task: DockerCompose@0
    displayName: 'Docker Push: Prod'
    condition: and(succeeded(), ne(variables['build.reason'], 'PullRequest'), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
    inputs:
      azureSubscription: 'NHSAPP-BuyingCatalogue (Prod)'
      azureContainerRegistry: '{"loginServer":"gpitfuturesprodacr.azurecr.io", "id" : "/subscriptions/d1be8dbc-1a9f-4b7b-ba51-037116110e00/resourceGroups/gpitfutures-prod-rg-acr/providers/Microsoft.ContainerRegistry/registries/gpitfuturesprodacr"}'
      dockerComposeFile: 'docker/docker-compose.build.yml'
      action: 'Push services'
      additionalImageTags: '$(semVer)'
      includeSourceTags: true
